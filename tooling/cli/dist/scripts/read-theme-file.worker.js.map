{"version":3,"sources":["../../src/scripts/read-theme-file.worker.ts"],"names":["bold","text","importTheme","path","module","theme","Error","Object","keys","join","readTheme","themeFilePath","cwd","process","absoluteThemePath","absoluteThemeDir","dirname","tsConfig","tsConfigPaths","loadConfig","resultType","tsNode","register","project","configFileAbsolutePath","compilerOptions","aliases","paths","reduce","acc","tsAlias","firstTarget","replace","jsAlias","absoluteBaseUrl","moduleAlias","addAliases","defaultProject","__dirname","fs","promises","stat","require","resolve","run","themeFile","argv","config","themeKeyConfiguration","template","send","stdout","write","e","err","toString","stderr","message","exit"],"mappings":"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","sourcesContent":["import \"regenerator-runtime/runtime\"\nimport path from \"path\"\nimport fs from \"fs\"\nimport * as tsNode from \"ts-node\"\nimport * as tsConfigPaths from \"tsconfig-paths\"\nimport moduleAlias from \"module-alias\"\nimport { isObject } from \"@chakra-ui/utils\"\nimport { createThemeTypingsInterface } from \"../command/tokens/create-theme-typings-interface\"\nimport { themeKeyConfiguration } from \"../command/tokens/config\"\n\nconst bold = (text: string) => `\\x1b[1m${text}\\x1b[22m`\n\nasync function importTheme(path: string) {\n  const module = await import(path)\n  const theme = module.default ?? module.theme\n\n  if (!theme)\n    throw new Error(`\n    Theme export not found in module: '${path}'.\n\n    A theme should have a ${bold(\"default\")} export or a ${bold(\n      \"theme\",\n    )} named export.\n    Found the following exports: ${bold(Object.keys(module).join(\", \"))}\n  `)\n\n  return theme\n}\n\nasync function readTheme(themeFilePath: string) {\n  const cwd = process.cwd()\n  const absoluteThemePath = path.join(cwd, themeFilePath)\n  const absoluteThemeDir = path.dirname(absoluteThemePath)\n\n  const tsConfig = tsConfigPaths.loadConfig(absoluteThemeDir)\n  if (tsConfig.resultType === \"success\") {\n    tsNode.register({\n      // use the TS projects own tsconfig file\n      project: tsConfig.configFileAbsolutePath,\n      compilerOptions: {\n        module: \"CommonJS\",\n      },\n    })\n\n    /**\n     * Replace the module aliases in the transpiled code,\n     * because ts-node does not resolve them to relative require paths.\n     *\n     * ðŸš¨ Note that only the first alias target will work\n     * @example tsconfig.json\n     * {\n     *   \"baseUrl\": \"src\",\n     *   \"paths\": {\n     *     \"@alias/*\": [\"target/*\"]\n     *   }\n     * }\n     */\n    const aliases = Object.keys(tsConfig.paths).reduce((acc, tsAlias) => {\n      // target/* -> target/\n      const firstTarget = tsConfig.paths[tsAlias][0].replace(/\\*$/, \"\")\n      // @alias/* -> @alias\n      const jsAlias = tsAlias.replace(/\\/\\*$/, \"\")\n      // @alias = baseUrl/target/\n      acc[jsAlias] = path.join(tsConfig.absoluteBaseUrl, firstTarget)\n      return acc\n    }, {})\n    moduleAlias.addAliases(aliases)\n  } else {\n    // it is a JS project\n    const defaultProject = path.join(\n      __dirname,\n      \"..\",\n      \"..\",\n      \"bin\",\n      \"tsconfig.json\",\n    )\n    tsNode.register({\n      project: defaultProject,\n    })\n  }\n\n  try {\n    await fs.promises.stat(absoluteThemePath)\n\n    return importTheme(absoluteThemePath)\n  } catch (statError) {\n    try {\n      return importTheme(require.resolve(themeFilePath, { paths: [cwd] }))\n    } catch (resolveError) {\n      throw new Error(\n        `Theme file or package not found \\n${statError} \\n${resolveError}`,\n      )\n    }\n  }\n}\n\n/**\n * Reads the theme file, generates the typings interface and prints it to stdout\n */\nasync function run() {\n  const themeFile = process.argv[2]\n\n  if (!themeFile) {\n    throw new Error(\"No path to theme file provided.\")\n  }\n\n  const theme = await readTheme(themeFile)\n\n  if (!isObject(theme)) {\n    throw new Error(\"Theme not found in default or named `theme` export\")\n  }\n\n  const template = await createThemeTypingsInterface(theme, {\n    config: themeKeyConfiguration,\n  })\n\n  if (process.send) {\n    process.send(template)\n  } else {\n    process.stdout.write(template)\n  }\n}\n\nrun().catch((e) => {\n  if (process.send) {\n    process.send({ err: e.toString() })\n  } else {\n    process.stderr.write(e.message)\n  }\n  process.exit(1)\n})\n"],"file":"read-theme-file.worker.js"}