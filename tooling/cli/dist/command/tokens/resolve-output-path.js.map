{"version":3,"sources":["../../../src/command/tokens/resolve-output-path.ts"],"names":["exists","fs","themeInterfaceDestination","resolveThemingDefinitionPath","baseDir","path","join","cwd","process","pathsToTry","resolve","Promise","all","map","possiblePath","triedPaths","find","Boolean","resolveOutputPath","overridePath","themingDefinitionFilePath","Error"],"mappings":";;;;;;AAAA;;AACA;;AACA;;;;;;;;AAEA,IAAMA,MAAM,GAAG,qBAAUC,eAAGD,MAAb,CAAf;AAEO,IAAME,yBAAyB,GAAG,CACvC,cADuC,EAEvC,YAFuC,EAGvC,eAHuC,EAIvC,MAJuC,EAKvC,OALuC,EAMvC,oBANuC,CAAlC;AASP;AACA;AACA;AACA;;;;SACeC,4B;;;AAwBf;AACA;AACA;;;;0FA1BA;AAAA;AAAA;AAAA;AAAA;AAAA;AACQC,YAAAA,OADR,GACkBC,iBAAKC,IAAL,CAAU,IAAV,EAAgB,IAAhB,EAAsB,IAAtB,CADlB;AAEQC,YAAAA,GAFR,GAEcC,OAAO,CAACD,GAAR,EAFd;AAIQE,YAAAA,UAJR,GAIqB,CACjBJ,iBAAKK,OAAL,0BAAaN,OAAb,EAAsB,IAAtB,SAA+BF,yBAA/B,EADiB,EAEjBG,iBAAKK,OAAL,0BAAaN,OAAb,EAAsB,IAAtB,EAA4B,IAA5B,SAAqCF,yBAArC,EAFiB,EAGjBG,iBAAKK,OAAL,0BAAaH,GAAb,SAAqBL,yBAArB,EAHiB,EAIjBG,iBAAKK,OAAL,0BAAaH,GAAb,EAAkB,IAAlB,SAA2BL,yBAA3B,EAJiB,EAKjBG,iBAAKK,OAAL,0BAAaH,GAAb,EAAkB,IAAlB,EAAwB,IAAxB,SAAiCL,yBAAjC,EALiB,CAJrB;AAAA;AAAA,mBAY2BS,OAAO,CAACC,GAAR,CACvBH,UAAU,CAACI,GAAX;AAAA,iFAAe,iBAAOC,YAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACHd,MAAM,CAACc,YAAD,CADH;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,yDAEJA,YAFI;;AAAA;AAAA,yDAIN,EAJM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAf;;AAAA;AAAA;AAAA;AAAA,gBADuB,CAZ3B;;AAAA;AAYQC,YAAAA,UAZR;AAAA,8CAqBSA,UAAU,CAACC,IAAX,CAAgBC,OAAhB,CArBT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SA2BsBC,iB;;;;;+EAAf,kBAAiCC,YAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACDA,YADC;AAAA;AAAA;AAAA;;AAAA,8CAEId,iBAAKK,OAAL,CAAaF,OAAO,CAACD,GAAR,EAAb,EAA4BY,YAA5B,CAFJ;;AAAA;AAAA;AAAA,mBAKmChB,4BAA4B,EAL/D;;AAAA;AAKCiB,YAAAA,yBALD;;AAAA,gBAMAA,yBANA;AAAA;AAAA;AAAA;;AAAA,kBAOG,IAAIC,KAAJ,CACJ,4FADI,CAPH;;AAAA;AAAA,8CAYED,yBAZF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import fs from \"fs\"\nimport path from \"path\"\nimport { promisify } from \"util\"\n\nconst exists = promisify(fs.exists)\n\nexport const themeInterfaceDestination = [\n  \"node_modules\",\n  \"@chakra-ui\",\n  \"styled-system\",\n  \"dist\",\n  \"types\",\n  \"theming.types.d.ts\",\n]\n\n/**\n * Finds the target file to override\n * In our case it is located in the @chakra-ui/styled-system package\n */\nasync function resolveThemingDefinitionPath(): Promise<string | undefined> {\n  const baseDir = path.join(\"..\", \"..\", \"..\")\n  const cwd = process.cwd()\n\n  const pathsToTry = [\n    path.resolve(baseDir, \"..\", ...themeInterfaceDestination),\n    path.resolve(baseDir, \"..\", \"..\", ...themeInterfaceDestination),\n    path.resolve(cwd, ...themeInterfaceDestination),\n    path.resolve(cwd, \"..\", ...themeInterfaceDestination),\n    path.resolve(cwd, \"..\", \"..\", ...themeInterfaceDestination),\n  ]\n\n  const triedPaths = await Promise.all(\n    pathsToTry.map(async (possiblePath) => {\n      if (await exists(possiblePath)) {\n        return possiblePath\n      }\n      return \"\"\n    }),\n  )\n\n  return triedPaths.find(Boolean)\n}\n\n/**\n * Find the location of the default target file or resolve the given path\n */\nexport async function resolveOutputPath(overridePath: string): Promise<string> {\n  if (overridePath) {\n    return path.resolve(process.cwd(), overridePath)\n  }\n\n  const themingDefinitionFilePath = await resolveThemingDefinitionPath()\n  if (!themingDefinitionFilePath) {\n    throw new Error(\n      \"Could not find @chakra-ui/styled-system in node_modules. Please provide `--out` parameter.\",\n    )\n  }\n\n  return themingDefinitionFilePath\n}\n"],"file":"resolve-output-path.js"}