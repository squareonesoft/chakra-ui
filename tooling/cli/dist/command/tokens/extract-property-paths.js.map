{"version":3,"sources":["../../../src/command/tokens/extract-property-paths.ts"],"names":["wrapWithQuotes","value","printUnionType","values","length","map","join","printUnionMap","unions","Object","entries","sort","a","b","localeCompare","targetKey","union","extractPropertyPaths","target","maxDepth","Array","isArray","reduce","allPropertyPaths","key","forEach","childKey","push"],"mappings":";;;;;;AAAA;;AAEA,SAASA,cAAT,CAAwBC,KAAxB,EAAwC;AACtC,gBAAWA,KAAX;AACD;;AAED,SAASC,cAAT,CAAwBC,MAAxB,EAA0C;AACxC,MAAI,CAACA,MAAM,CAACC,MAAZ,EAAoB;AAClB,WAAO,OAAP;AACD;;AAED,SAAOD,MAAM,CAACE,GAAP,CAAWL,cAAX,EAA2BM,IAA3B,CAAgC,KAAhC,CAAP;AACD;AAED;AACA;AACA;AACA;;;AACO,SAASC,aAAT,CAAuBC,MAAvB,EAAyD;AAC9D,SAAOC,MAAM,CAACC,OAAP,CAAeF,MAAf,EACJG,IADI,CACC;AAAA,QAAEC,CAAF;AAAA,QAAOC,CAAP;AAAA,WAAcD,CAAC,CAACE,aAAF,CAAgBD,CAAhB,CAAd;AAAA,GADD,EAEJR,GAFI,CAEA;AAAA,QAAEU,SAAF;AAAA,QAAaC,KAAb;AAAA,WAA2BD,SAA3B,UAAyCb,cAAc,CAACc,KAAD,CAAvD;AAAA,GAFA,EAGJV,IAHI,CAGC,IAHD,CAAP;AAID;AAED;AACA;AACA;;;AACO,SAASW,oBAAT,CAA8BC,MAA9B,EAA+CC,QAA/C,EAA6D;AAAA,MAAdA,QAAc;AAAdA,IAAAA,QAAc,GAAH,CAAG;AAAA;;AAClE,MAAK,CAAC,qBAASD,MAAT,CAAD,IAAqB,CAACE,KAAK,CAACC,OAAN,CAAcH,MAAd,CAAvB,IAAiD,CAACC,QAAtD,EAAgE;AAC9D,WAAO,EAAP;AACD;;AAED,SAAOV,MAAM,CAACC,OAAP,CAAeQ,MAAf,EAAuBI,MAAvB,CAA8B,UAACC,gBAAD,SAAoC;AAAA,QAAhBC,GAAgB;AAAA,QAAXvB,KAAW;;AACvE,QAAI,qBAASA,KAAT,CAAJ,EAAqB;AACnBgB,MAAAA,oBAAoB,CAAChB,KAAD,EAAQkB,QAAQ,GAAG,CAAnB,CAApB,CAA0CM,OAA1C,CAAkD,UAACC,QAAD;AAAA,eAChD;AACAH,UAAAA,gBAAgB,CAACI,IAAjB,CAAyBH,GAAzB,SAAgCE,QAAhC;AAFgD;AAAA,OAAlD;AAID,KALD,MAKO;AACL;AACAH,MAAAA,gBAAgB,CAACI,IAAjB,CAAsBH,GAAtB;AACD;;AAED,WAAOD,gBAAP;AACD,GAZM,EAYJ,EAZI,CAAP;AAaD","sourcesContent":["import { isObject } from \"@chakra-ui/utils\"\n\nfunction wrapWithQuotes(value: unknown) {\n  return `\"${value}\"`\n}\n\nfunction printUnionType(values: string[]) {\n  if (!values.length) {\n    return \"never\"\n  }\n\n  return values.map(wrapWithQuotes).join(\" | \")\n}\n\n/**\n * @example\n * { colors: ['red.500', 'green.500'] } => `colors: \"red.500\" | \"green.500\"`\n */\nexport function printUnionMap(unions: Record<string, string[]>) {\n  return Object.entries(unions)\n    .sort(([a], [b]) => a.localeCompare(b))\n    .map(([targetKey, union]) => `${targetKey}: ${printUnionType(union)};`)\n    .join(\"\\n\")\n}\n\n/**\n * Extract recursively all property paths with a max depth\n */\nexport function extractPropertyPaths(target: unknown, maxDepth = 1) {\n  if ((!isObject(target) && !Array.isArray(target)) || !maxDepth) {\n    return []\n  }\n\n  return Object.entries(target).reduce((allPropertyPaths, [key, value]) => {\n    if (isObject(value)) {\n      extractPropertyPaths(value, maxDepth - 1).forEach((childKey) =>\n        // e.g. gray.500\n        allPropertyPaths.push(`${key}.${childKey}`),\n      )\n    } else {\n      // e.g. transparent\n      allPropertyPaths.push(key)\n    }\n\n    return allPropertyPaths\n  }, [] as string[])\n}\n"],"file":"extract-property-paths.js"}