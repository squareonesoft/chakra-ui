{"version":3,"sources":["../../../src/command/tokens/create-theme-typings-interface.ts"],"names":["createThemeTypingsInterface","theme","config","unions","reduce","allUnions","key","maxScanDepth","filter","flatMap","value","target","Array","isArray","textStyles","layerStyles","colorSchemes","componentTypes","template"],"mappings":";;;;;AAAA;;AACA;;AACA;;AAIA;;AACA;;AACA;;;;;;;;SAmCsBA,2B;;;;;yFAAf,iBACLC,KADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAEHC,YAAAA,MAFG,QAEHA,MAFG;AAICC,YAAAA,MAJD,GAIUD,MAAM,CAACE,MAAP,CACb,UACEC,SADF,SAGK;AAAA,kBADDC,GACC,SADDA,GACC;AAAA,kBADIC,YACJ,SADIA,YACJ;AAAA,uCADkBC,MAClB;AAAA,kBADkBA,MAClB,6BAD2B;AAAA,uBAAM,IAAN;AAAA,eAC3B;AAAA,wCADuCC,OACvC;AAAA,kBADuCA,OACvC,8BADiD,UAACC,KAAD;AAAA,uBAAWA,KAAX;AAAA,eACjD;AACH,kBAAMC,MAAM,GAAGV,KAAK,CAACK,GAAD,CAApB;;AACA,kBAAI,qBAASK,MAAT,KAAoBC,KAAK,CAACC,OAAN,CAAcF,MAAd,CAAxB,EAA+C;AAC7CN,gBAAAA,SAAS,CAACC,GAAD,CAAT,GAAiB,gDAAqBK,MAArB,EAA6BJ,YAA7B,EACdC,MADc,CACPA,MADO,EAEdC,OAFc,CAENA,OAFM,CAAjB;AAGD,eAJD,MAIO;AACLJ,gBAAAA,SAAS,CAACC,GAAD,CAAT,GAAiB,EAAjB;AACD;;AACD,qBAAOD,SAAP;AACD,aAdY,EAeb,EAfa,CAJV;AAsBCS,YAAAA,UAtBD,GAsBc,8CAAoBb,KAApB,EAA2B,YAA3B,CAtBd;AAuBCc,YAAAA,WAvBD,GAuBe,8CAAoBd,KAApB,EAA2B,aAA3B,CAvBf;AAwBCe,YAAAA,YAxBD,GAwBgB,kDAAwBf,KAAxB,CAxBhB;AAyBCgB,YAAAA,cAzBD,GAyBkB,kDAAsBhB,KAAtB,CAzBlB;AA2BCiB,YAAAA,QA3BD,GA4BH;AA5BG,uIAgCH,sDAAmBf,MAAnB;AAA2BW,cAAAA,UAAU,EAAVA,UAA3B;AAAuCC,cAAAA,WAAW,EAAXA,WAAvC;AAAoDC,cAAAA,YAAY,EAAZA;AAApD,eAhCG,YAiCH,gDAAoBC,cAApB,CAjCG;AAAA,6CAsCE,uDAA8BC,QAA9B,CAtCF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import { isObject } from \"@chakra-ui/utils\"\nimport { extractPropertyPaths, printUnionMap } from \"./extract-property-paths\"\nimport {\n  extractComponentTypes,\n  printComponentTypes,\n} from \"./extract-component-types\"\nimport { extractColorSchemeTypes } from \"./extract-color-schemes\"\nimport { extractPropertyKeys } from \"./extract-property-keys\"\nimport { formatWithPrettierIfAvailable } from \"../../utils/format-with-prettier\"\n\nexport interface ThemeKeyOptions {\n  /**\n   * Property key in the theme object\n   * @example colors\n   */\n  key: string\n  /**\n   * Maximum extraction level\n   * @example\n   * union: gray.500\n   * level: 1---|2--|\n   * @default 1\n   */\n  maxScanDepth?: number\n  /**\n   * Pass a function to filter extracted values\n   * @example\n   * Exclude numeric index values from `breakpoints`\n   * @default () => true\n   */\n  filter?: (value: string) => boolean\n\n  /**\n   * Pass a function to flatMap extracted values\n   * @default value => value\n   */\n  flatMap?: (value: string) => string | string[]\n}\n\nexport interface CreateThemeTypingsInterfaceOptions {\n  config: ThemeKeyOptions[]\n}\n\nexport async function createThemeTypingsInterface(\n  theme: Record<string, unknown>,\n  { config }: CreateThemeTypingsInterfaceOptions,\n) {\n  const unions = config.reduce(\n    (\n      allUnions,\n      { key, maxScanDepth, filter = () => true, flatMap = (value) => value },\n    ) => {\n      const target = theme[key]\n      if (isObject(target) || Array.isArray(target)) {\n        allUnions[key] = extractPropertyPaths(target, maxScanDepth)\n          .filter(filter)\n          .flatMap(flatMap)\n      } else {\n        allUnions[key] = []\n      }\n      return allUnions\n    },\n    {} as Record<string, string[]>,\n  )\n\n  const textStyles = extractPropertyKeys(theme, \"textStyles\")\n  const layerStyles = extractPropertyKeys(theme, \"layerStyles\")\n  const colorSchemes = extractColorSchemeTypes(theme)\n  const componentTypes = extractComponentTypes(theme)\n\n  const template =\n    // language=ts\n    `// regenerate by running\n// npx @chakra-ui/cli tokens path/to/your/theme.(js|ts)\nexport interface ThemeTypings {\n  ${printUnionMap({ ...unions, textStyles, layerStyles, colorSchemes })}\n  ${printComponentTypes(componentTypes)}\n}\n\n`\n\n  return formatWithPrettierIfAvailable(template)\n}\n"],"file":"create-theme-typings-interface.js"}