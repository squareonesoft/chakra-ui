{"version":3,"sources":["../../../src/command/tokens/extract-component-types.ts"],"names":["extractComponentTypes","theme","components","Object","entries","reduce","allDefs","componentName","definition","sizes","keys","variants","escapeComponentName","match","printComponentTypes","componentTypes","types","map","unions","join"],"mappings":";;;;;;AAAA;;AACA;;AAOO,SAASA,qBAAT,CAA+BC,KAA/B,EAA+D;AACpE,MAAMC,UAAU,GAAGD,KAAK,CAACC,UAAzB;;AACA,MAAI,CAAC,qBAASA,UAAT,CAAL,EAA2B;AACzB,WAAO,EAAP;AACD;;AAED,SAAOC,MAAM,CAACC,OAAP,CAAeF,UAAf,EAA2BG,MAA3B,CACL,UAACC,OAAD,QAA0C;AAAA,QAA/BC,aAA+B;AAAA,QAAhBC,UAAgB;;AACxC,QAAIA,UAAJ,EAAgB;AAAA;;AACdF,MAAAA,OAAO,CAACC,aAAD,CAAP,GAAyB;AACvBE,QAAAA,KAAK,EAAEN,MAAM,CAACO,IAAP,sBAAYF,UAAU,CAACC,KAAvB,gCAAgC,EAAhC,CADgB;AAEvBE,QAAAA,QAAQ,EAAER,MAAM,CAACO,IAAP,yBAAYF,UAAU,CAACG,QAAvB,mCAAmC,EAAnC;AAFa,OAAzB;AAID;;AAED,WAAOL,OAAP;AACD,GAVI,EAWL,EAXK,CAAP;AAaD;;AAED,SAASM,mBAAT,CAA6BL,aAA7B,EAAoD;AAClD,SAAOA,aAAa,CAACM,KAAd,CAAoB,mBAApB,IACHN,aADG,UAECA,aAFD,OAAP;AAGD;;AAEM,SAASO,mBAAT,CACLC,cADK,EAEL;AACA,MAAMC,KAAK,GAAGb,MAAM,CAACC,OAAP,CAAeW,cAAf,EACXE,GADW,CAEV;AAAA,QAAEV,aAAF;AAAA,QAAiBW,MAAjB;AAAA,WACKN,mBAAmB,CAACL,aAAD,CADxB,eAEF,yCAAcW,MAAd,CAFE;AAAA,GAFU,EAOXC,IAPW,MAAd;AASA,+BACEH,KADF;AAID","sourcesContent":["import { isObject } from \"@chakra-ui/utils\"\nimport { printUnionMap } from \"./extract-property-paths\"\n\ninterface ComponentType extends Record<string, string[]> {\n  sizes: string[]\n  variants: string[]\n}\n\nexport function extractComponentTypes(theme: Record<string, unknown>) {\n  const components = theme.components\n  if (!isObject(components)) {\n    return {}\n  }\n\n  return Object.entries(components).reduce(\n    (allDefs, [componentName, definition]) => {\n      if (definition) {\n        allDefs[componentName] = {\n          sizes: Object.keys(definition.sizes ?? {}),\n          variants: Object.keys(definition.variants ?? {}),\n        }\n      }\n\n      return allDefs\n    },\n    {} as Record<string, ComponentType>,\n  )\n}\n\nfunction escapeComponentName(componentName: string) {\n  return componentName.match(/^[a-zA-Z0-9\\-_]+$/)\n    ? componentName\n    : `\"${componentName}\"`\n}\n\nexport function printComponentTypes(\n  componentTypes: Record<string, ComponentType>,\n) {\n  const types = Object.entries(componentTypes)\n    .map(\n      ([componentName, unions]) =>\n        `${escapeComponentName(componentName)}: {\n  ${printUnionMap(unions)}\n}`,\n    )\n    .join(`\\n`)\n\n  return `components: {\n  ${types}  \n}\n`\n}\n"],"file":"extract-component-types.js"}