{"version":3,"sources":["../../../src/command/tokens/index.ts"],"names":["writeFileAsync","writeFile","runTemplateWorker","themeFile","worker","path","join","__dirname","stdio","cwd","process","Promise","resolve","reject","on","message","errMessage","err","Error","String","generateThemeTypings","out","spinner","start","template","outPath","info","text","succeed","fail","console","error","stop"],"mappings":";;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;AAOA,IAAMA,cAAc,GAAG,qBAAUC,aAAV,CAAvB;;SAEeC,iB;;;;;+EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACEC,YAAAA,SADF,QACEA,SADF;AAKQC,YAAAA,MALR,GAKiB,yBACbC,iBAAKC,IAAL,CAAUC,SAAV,EAAqB,IAArB,EAA2B,IAA3B,EAAiC,SAAjC,EAA4C,2BAA5C,CADa,EAEb,CAACJ,SAAD,CAFa,EAGb;AACEK,cAAAA,KAAK,EAAE,CAAC,MAAD,EAAS,MAAT,EAAiB,MAAjB,EAAyB,KAAzB,CADT;AAEEC,cAAAA,GAAG,EAAEC,OAAO,CAACD,GAAR;AAFP,aAHa,CALjB;AAAA,6CAcS,IAAIE,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCT,cAAAA,MAAM,CAACU,EAAP,CAAU,SAAV,EAAqB,UAACC,OAAD,EAAyC;AAC5D,oBAAMC,UAAU,GAAID,OAAJ,oBAAIA,OAAD,CAA0BE,GAA7C;;AAEA,oBAAID,UAAJ,EAAgB;AACdH,kBAAAA,MAAM,CAAC,IAAIK,KAAJ,CAAUF,UAAV,CAAD,CAAN;AACD;;AAED,uBAAOJ,OAAO,CAACO,MAAM,CAACJ,OAAD,CAAP,CAAd;AACD,eARD;AASAX,cAAAA,MAAM,CAACU,EAAP,CAAU,OAAV,EAAmBD,MAAnB;AACD,aAXM,CAdT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SA4BsBO,oB;;;;;kFAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACLjB,YAAAA,SADK,SACLA,SADK,EAELkB,GAFK,SAELA,GAFK;AAOCC,YAAAA,OAPD,GAOW,qBAAI,iCAAJ,EAAuCC,KAAvC,EAPX;AAAA;AAAA;AAAA,mBASoBrB,iBAAiB,CAAC;AAAEC,cAAAA,SAAS,EAATA;AAAF,aAAD,CATrC;;AAAA;AASGqB,YAAAA,QATH;AAAA;AAAA,mBAUmB,0CAAkBH,GAAlB,CAVnB;;AAAA;AAUGI,YAAAA,OAVH;AAYHH,YAAAA,OAAO,CAACI,IAAR;AACAJ,YAAAA,OAAO,CAACK,IAAR,qBAA8BF,OAA9B;AAbG;AAAA,mBAeGzB,cAAc,CAACyB,OAAD,EAAUD,QAAV,EAAoB,MAApB,CAfjB;;AAAA;AAgBHF,YAAAA,OAAO,CAACM,OAAR,CAAgB,MAAhB;AAhBG;AAAA;;AAAA;AAAA;AAAA;AAkBHN,YAAAA,OAAO,CAACO,IAAR,CAAa,mBAAb;AACAC,YAAAA,OAAO,CAACC,KAAR,CAAc,aAAEhB,OAAhB;;AAnBG;AAAA;AAqBHO,YAAAA,OAAO,CAACU,IAAR;AArBG;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import { promisify } from \"util\"\nimport { writeFile } from \"fs\"\nimport { fork, Serializable } from \"child_process\"\nimport path from \"path\"\nimport ora from \"ora\"\nimport {\n  resolveOutputPath,\n  themeInterfaceDestination,\n} from \"./resolve-output-path\"\n\ntype ErrorRecord = Record<\"err\", string>\n\nconst writeFileAsync = promisify(writeFile)\n\nasync function runTemplateWorker({\n  themeFile,\n}: {\n  themeFile: string\n}): Promise<string> {\n  const worker = fork(\n    path.join(__dirname, \"..\", \"..\", \"scripts\", \"read-theme-file.worker.js\"),\n    [themeFile],\n    {\n      stdio: [\"pipe\", \"pipe\", \"pipe\", \"ipc\"],\n      cwd: process.cwd(),\n    },\n  )\n\n  return new Promise((resolve, reject) => {\n    worker.on(\"message\", (message: ErrorRecord | Serializable) => {\n      const errMessage = (message as ErrorRecord)?.err\n\n      if (errMessage) {\n        reject(new Error(errMessage))\n      }\n\n      return resolve(String(message))\n    })\n    worker.on(\"error\", reject)\n  })\n}\n\nexport async function generateThemeTypings({\n  themeFile,\n  out,\n}: {\n  themeFile: string\n  out: string\n}) {\n  const spinner = ora(\"Generating chakra theme typings\").start()\n  try {\n    const template = await runTemplateWorker({ themeFile })\n    const outPath = await resolveOutputPath(out)\n\n    spinner.info()\n    spinner.text = `Write file \"${outPath}\"...`\n\n    await writeFileAsync(outPath, template, \"utf8\")\n    spinner.succeed(\"Done\")\n  } catch (e) {\n    spinner.fail(\"An error occurred\")\n    console.error(e.message)\n  } finally {\n    spinner.stop()\n  }\n}\n\nexport { themeInterfaceDestination }\n"],"file":"index.js"}