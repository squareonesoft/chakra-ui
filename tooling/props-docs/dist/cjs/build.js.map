{"version":3,"sources":["../../src/build.ts"],"names":["globAsync","glob","excludedPropNames","propNames","concat","rootDir","path","join","__dirname","sourcePath","outputPath","tsConfigPath","main","findComponentFiles","componentFiles","length","log","parsedInfo","parseInfo","componentInfo","extractComponentInfo","writeComponentInfoFiles","writeIndexCJS","writeIndexESM","require","module","console","error","cwd","tsFiles","filter","f","includes","filePaths","docgen","withCustomConfig","shouldRemoveUndefinedFromOptional","propFilter","prop","component","isStyledSystemProp","name","isHTMLElementProp","parent","fileName","isHook","startsWith","isTypeScriptNative","parse","flatMap","file","absoluteFilePath","docs","reduce","acc","def","Object","keys","props","createUniqueName","displayName","existing","prev","String","toLowerCase","exportName","push","importPath","info","filePath","content","JSON","stringify","cjsIndexFilePath","cjsExports","map","esmIndexFilePath","esmPropImports","esmPropExports","args"],"mappings":"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","sourcesContent":["import \"regenerator-runtime/runtime\"\nimport glob from \"glob\"\nimport path from \"path\"\nimport { promisify } from \"util\"\nimport { writeFileSync } from \"fs\"\nimport * as docgen from \"react-docgen-typescript\"\nimport { ComponentDoc } from \"react-docgen-typescript\"\nimport mkdirp from \"mkdirp\"\nimport { propNames } from \"@chakra-ui/styled-system\"\n\ntype ComponentInfo = {\n  def: ComponentDoc\n  displayName: string\n  fileName: string\n  exportName: string\n  importPath: string\n}\n\nconst globAsync = promisify(glob)\n\nconst excludedPropNames = propNames.concat([\n  \"as\",\n  \"apply\",\n  \"sx\",\n  \"__css\",\n  \"css\",\n])\n\nconst rootDir = path.join(__dirname, \"..\", \"..\", \"..\", \"..\")\nconst sourcePath = path.join(rootDir, \"packages\")\nconst outputPath = path.join(__dirname, \"..\", \"components\")\n\nconst tsConfigPath = path.join(sourcePath, \"..\", \"tsconfig.json\")\n\nexport async function main() {\n  const componentFiles = await findComponentFiles()\n\n  if (componentFiles.length) {\n    await mkdirp(outputPath)\n  }\n\n  log(\"Parsing files for component types...\")\n  const parsedInfo = parseInfo(componentFiles)\n\n  log(\"Extracting component info...\")\n  const componentInfo = extractComponentInfo(parsedInfo)\n\n  log(\"Writing component info files...\")\n  writeComponentInfoFiles(componentInfo)\n\n  log(\"Writing index files...\")\n  writeIndexCJS(componentInfo)\n  writeIndexESM(componentInfo)\n\n  log(`Processed ${componentInfo.length} components`)\n}\n\nif (require.main === module) {\n  // run main function if called via cli\n  main().catch(console.error)\n}\n\n/**\n * Find all TypeScript files which could contain component definitions\n */\nasync function findComponentFiles() {\n  const tsFiles = await globAsync(\"react/**/src/**/*.@(ts|tsx)\", {\n    cwd: sourcePath,\n  })\n\n  return tsFiles.filter((f) => !f.includes(\"stories\"))\n}\n\n/**\n * Parse files with react-doc-gen-typescript\n */\nfunction parseInfo(filePaths: string[]) {\n  const { parse } = docgen.withCustomConfig(tsConfigPath, {\n    shouldRemoveUndefinedFromOptional: true,\n    propFilter: (prop, component) => {\n      const isStyledSystemProp = excludedPropNames.includes(prop.name)\n      const isHTMLElementProp =\n        prop.parent?.fileName.includes(\"node_modules\") ?? false\n      const isHook = component.name.startsWith(\"use\")\n      const isTypeScriptNative =\n        prop.parent?.fileName.includes(\"node_modules/typescript\") ?? false\n\n      return (\n        (isHook && !isTypeScriptNative) ||\n        !(isStyledSystemProp || isHTMLElementProp)\n      )\n    },\n  })\n\n  return filePaths.flatMap((file) => {\n    const absoluteFilePath = path.join(sourcePath, file)\n    return parse(absoluteFilePath)\n  })\n}\n\n/**\n * Extract meta data of component docs\n */\nfunction extractComponentInfo(docs: ComponentDoc[]) {\n  return docs.reduce((acc, def) => {\n    if (!Object.keys(def.props || {}).length) {\n      return acc\n    }\n\n    function createUniqueName(displayName: string) {\n      const existing = acc.filter(\n        (prev) =>\n          String(prev.def.displayName).toLowerCase() ===\n          displayName.toLowerCase(),\n      )\n\n      if (!existing.length) {\n        return displayName\n      }\n\n      return `${displayName}${existing.length}`\n    }\n\n    const exportName = createUniqueName(def.displayName)\n    const fileName = `${exportName}.json`\n\n    acc.push({\n      def,\n      displayName: def.displayName,\n      fileName,\n      exportName,\n      importPath: `../components/${fileName}`,\n    })\n    return acc\n  }, [] as ComponentInfo[])\n}\n\n/**\n * Write component info as JSON to disk\n */\nfunction writeComponentInfoFiles(componentInfo: ComponentInfo[]) {\n  for (const info of componentInfo) {\n    const filePath = path.join(outputPath, info.fileName)\n    const content = JSON.stringify(info.def)\n    writeFileSync(filePath, content)\n  }\n}\n\n/**\n * Create and write the index file in CJS format\n */\nfunction writeIndexCJS(componentInfo: ComponentInfo[]) {\n  const cjsIndexFilePath = path.join(__dirname, \"index.js\")\n  const cjsExports = componentInfo.map(\n    ({ displayName, importPath }) =>\n      `module.exports['${displayName}'] = require('${importPath}')`,\n  )\n  writeFileSync(cjsIndexFilePath, cjsExports.join(\"\\n\"))\n}\n\n/**\n * Create and write the index file in ESM format\n */\nfunction writeIndexESM(componentInfo: ComponentInfo[]) {\n  const esmIndexFilePath = path.join(__dirname, \"..\", \"esm\", \"index.js\")\n\n  const esmPropImports = componentInfo\n    .map(\n      ({ exportName, importPath }) =>\n        `import ${exportName}Import from '${importPath}'`,\n    )\n    .join(\"\\n\")\n\n  const esmPropExports = componentInfo\n    .map(({ exportName }) => `export const ${exportName} = ${exportName}Import`)\n    .join(\"\\n\")\n\n  writeFileSync(\n    esmIndexFilePath,\n    `${esmPropImports}\n${esmPropExports}`,\n  )\n}\n\nfunction log(...args: unknown[]) {\n  console.info(`[props-docs]`, ...args)\n}\n"],"file":"build.js"}