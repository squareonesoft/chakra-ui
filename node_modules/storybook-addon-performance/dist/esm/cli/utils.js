export const debug = (...args) => console.warn(...args);
export const stdout = (...args) => console.log(...args);
export const usage = () => debug(`Usage:
sb-perf <directory> [...<directory>]

Example
sb-perf results-directory > output-file.csv
# OR
sb-perf ABTestDirectory OtherDirectory > output-file.csv
`);
const getTaskValue = (result) => {
    if ('averageMs' in result) {
        return result.averageMs;
    }
    if ('value' in result) {
        return Number(result.value);
    }
    return null;
};
export const convertToTaskValueMap = (resultMap) => {
    return Object.values(resultMap).reduce((acc, result) => {
        return { ...acc, [result.taskName]: [getTaskValue(result)] };
    }, {});
};
export const combineTaskResultsByGroupId = (results, [groupId, taskValueMap]) => {
    Object.entries(taskValueMap).forEach(([taskName, value]) => {
        results[groupId] = {
            ...results[groupId],
            [taskName]: results[groupId] && results[groupId][taskName]
                ? results[groupId][taskName].concat(value)
                : value,
        };
    });
    return results;
};
export const median = (numbers) => {
    const sorted = numbers.slice().sort((a, b) => a - b);
    const middle = Math.floor(sorted.length / 2);
    if (sorted.length % 2 === 0) {
        return (sorted[middle - 1] + sorted[middle]) / 2;
    }
    return sorted[middle];
};
export const performCalculations = (data) => {
    const numResults = Object.values(data)[0].length;
    return Object.entries(data).map(([key, values]) => ({
        key,
        numResults,
        samples: values.join(','),
        minValue: Math.min(...values),
        maxValue: Math.max(...values),
        meanValue: values.reduce((acc, curr) => acc + curr, 0) / numResults,
        medianValue: median(values),
    }));
};
export const printCSV = (rows) => {
    const numResults = rows[0].numResults;
    stdout(`type,${Array.from({ length: numResults })
        .map((_, i) => `#${i + 1}`)
        .join(',')},min,max,mean,median`);
    rows.forEach(({ key, samples, minValue, maxValue, meanValue, medianValue }) => {
        stdout(`${key},${samples},${minValue},${maxValue},${meanValue},${medianValue}`);
    });
};
const padded = (padding) => (str) => `${str}`.padEnd(padding);
const paddedKey = padded(50);
const paddedValue = padded(20);
export const printCSVSummary = (resultNames, results) => {
    debug(`${paddedKey('Type')} | ${resultNames.map(paddedValue).join('| ')}`);
    debug('-'.padEnd(50 + 20 * resultNames.length, '-'));
    stdout(`Type,${resultNames.join(',')}`);
    const toPrint = {};
    results.forEach((rows) => {
        rows.forEach(({ key, medianValue }) => {
            if (toPrint[key]) {
                toPrint[key].push(medianValue);
            }
            else {
                toPrint[key] = [medianValue];
            }
        });
    });
    Object.entries(toPrint).forEach(([key, values]) => {
        debug(`${paddedKey(key)} | ${values.map(paddedValue).join('| ')}`);
        stdout(`${key},${values.join(',')}`);
    });
};
