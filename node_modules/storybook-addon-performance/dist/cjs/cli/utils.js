"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.printCSVSummary = exports.printCSV = exports.performCalculations = exports.median = exports.combineTaskResultsByGroupId = exports.convertToTaskValueMap = exports.usage = exports.stdout = exports.debug = void 0;
var tslib_1 = require("tslib");
exports.debug = function () {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    return console.warn.apply(console, tslib_1.__spread(args));
};
exports.stdout = function () {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    return console.log.apply(console, tslib_1.__spread(args));
};
exports.usage = function () {
    return exports.debug("Usage:\nsb-perf <directory> [...<directory>]\n\nExample\nsb-perf results-directory > output-file.csv\n# OR\nsb-perf ABTestDirectory OtherDirectory > output-file.csv\n");
};
var getTaskValue = function (result) {
    if ('averageMs' in result) {
        return result.averageMs;
    }
    if ('value' in result) {
        return Number(result.value);
    }
    return null;
};
exports.convertToTaskValueMap = function (resultMap) {
    return Object.values(resultMap).reduce(function (acc, result) {
        var _a;
        return tslib_1.__assign(tslib_1.__assign({}, acc), (_a = {}, _a[result.taskName] = [getTaskValue(result)], _a));
    }, {});
};
exports.combineTaskResultsByGroupId = function (results, _a) {
    var _b = tslib_1.__read(_a, 2), groupId = _b[0], taskValueMap = _b[1];
    Object.entries(taskValueMap).forEach(function (_a) {
        var _b;
        var _c = tslib_1.__read(_a, 2), taskName = _c[0], value = _c[1];
        results[groupId] = tslib_1.__assign(tslib_1.__assign({}, results[groupId]), (_b = {}, _b[taskName] = results[groupId] && results[groupId][taskName]
            ? results[groupId][taskName].concat(value)
            : value, _b));
    });
    return results;
};
exports.median = function (numbers) {
    var sorted = numbers.slice().sort(function (a, b) { return a - b; });
    var middle = Math.floor(sorted.length / 2);
    if (sorted.length % 2 === 0) {
        return (sorted[middle - 1] + sorted[middle]) / 2;
    }
    return sorted[middle];
};
exports.performCalculations = function (data) {
    var numResults = Object.values(data)[0].length;
    return Object.entries(data).map(function (_a) {
        var _b = tslib_1.__read(_a, 2), key = _b[0], values = _b[1];
        return ({
            key: key,
            numResults: numResults,
            samples: values.join(','),
            minValue: Math.min.apply(Math, tslib_1.__spread(values)),
            maxValue: Math.max.apply(Math, tslib_1.__spread(values)),
            meanValue: values.reduce(function (acc, curr) { return acc + curr; }, 0) / numResults,
            medianValue: exports.median(values),
        });
    });
};
exports.printCSV = function (rows) {
    var numResults = rows[0].numResults;
    exports.stdout("type," + Array.from({ length: numResults })
        .map(function (_, i) { return "#" + (i + 1); })
        .join(',') + ",min,max,mean,median");
    rows.forEach(function (_a) {
        var key = _a.key, samples = _a.samples, minValue = _a.minValue, maxValue = _a.maxValue, meanValue = _a.meanValue, medianValue = _a.medianValue;
        exports.stdout(key + "," + samples + "," + minValue + "," + maxValue + "," + meanValue + "," + medianValue);
    });
};
var padded = function (padding) { return function (str) { return ("" + str).padEnd(padding); }; };
var paddedKey = padded(50);
var paddedValue = padded(20);
exports.printCSVSummary = function (resultNames, results) {
    exports.debug(paddedKey('Type') + " | " + resultNames.map(paddedValue).join('| '));
    exports.debug('-'.padEnd(50 + 20 * resultNames.length, '-'));
    exports.stdout("Type," + resultNames.join(','));
    var toPrint = {};
    results.forEach(function (rows) {
        rows.forEach(function (_a) {
            var key = _a.key, medianValue = _a.medianValue;
            if (toPrint[key]) {
                toPrint[key].push(medianValue);
            }
            else {
                toPrint[key] = [medianValue];
            }
        });
    });
    Object.entries(toPrint).forEach(function (_a) {
        var _b = tslib_1.__read(_a, 2), key = _b[0], values = _b[1];
        exports.debug(paddedKey(key) + " | " + values.map(paddedValue).join('| '));
        exports.stdout(key + "," + values.join(','));
    });
};
