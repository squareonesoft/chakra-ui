"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var fs = tslib_1.__importStar(require("fs"));
var path = tslib_1.__importStar(require("path"));
var utils_1 = require("./utils");
var main = function () {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var cliArgs = args.length ? args : process.argv;
    if (cliArgs.length <= 2) {
        return utils_1.usage();
    }
    var directoryResultSets = cliArgs
        .slice(2)
        .map(function (pathName) {
        try {
            var dataFiles = fs.readdirSync(pathName);
            if (dataFiles) {
                var resultSetsByGroupId = dataFiles
                    .map(function (dataFile) {
                    var json = fs.readFileSync(path.join(pathName, dataFile));
                    return JSON.parse(json);
                })
                    .map(function (_a) {
                    var results = _a.results;
                    return results;
                })
                    .flatMap(function (taskGroupResults) { return taskGroupResults; })
                    .map(function (_a) {
                    var groupId = _a.groupId, map = _a.map;
                    return [groupId, utils_1.convertToTaskValueMap(map)];
                })
                    .reduce(utils_1.combineTaskResultsByGroupId, {});
                return tslib_1.__assign({ name: pathName }, resultSetsByGroupId);
            }
            else {
                utils_1.debug("cli: Directory '" + pathName + "' is empty - did you specify a directory with storybook-addon-performance output files?");
            }
        }
        catch (e) {
            utils_1.debug("cli: Problem parsing a file in '" + pathName + "' - was this created by the storybook-addon-performance?", e);
        }
        return { name: '' };
    })
        .filter(function (_a) {
        var name = _a.name;
        return name;
    });
    var resultNames = [];
    var resultSets = [];
    directoryResultSets.forEach(function (_a) {
        var name = _a.name, resultsByGroupId = tslib_1.__rest(_a, ["name"]);
        var resultName = path.basename(name);
        utils_1.stdout(resultName);
        Object.entries(resultsByGroupId).forEach(function (_a) {
            var _b = tslib_1.__read(_a, 2), groupId = _b[0], result = _b[1];
            var finalResults = utils_1.performCalculations(result);
            utils_1.stdout(groupId);
            utils_1.printCSV(finalResults);
            resultSets.push(finalResults);
        });
        utils_1.stdout();
        resultNames.push(resultName);
    });
    utils_1.printCSVSummary(resultNames, resultSets);
};
exports.default = main;
