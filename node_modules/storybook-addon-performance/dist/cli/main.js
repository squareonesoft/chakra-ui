"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const path = require("path");
const utils_1 = require("./utils");
const main = (...args) => {
    const cliArgs = args.length ? args : process.argv;
    if (cliArgs.length <= 2) {
        return utils_1.usage();
    }
    const directoryResultSets = cliArgs
        .slice(2)
        .map((pathName) => {
        try {
            const dataFiles = fs.readdirSync(pathName);
            if (dataFiles) {
                const resultSetsByGroupId = dataFiles
                    .map((dataFile) => {
                    const json = fs.readFileSync(path.join(pathName, dataFile));
                    return JSON.parse(json);
                })
                    .map(({ results }) => results)
                    .flatMap((taskGroupResults) => taskGroupResults)
                    .map(({ groupId, map }) => [groupId, utils_1.convertToTaskValueMap(map)])
                    .reduce(utils_1.combineTaskResultsByGroupId, {});
                return { name: pathName, ...resultSetsByGroupId };
            }
            else {
                utils_1.debug(`cli: Directory '${pathName}' is empty - did you specify a directory with storybook-addon-performance output files?`);
            }
        }
        catch (e) {
            utils_1.debug(`cli: Problem parsing a file in '${pathName}' - was this created by the storybook-addon-performance?`, e);
        }
        return { name: '' };
    })
        .filter(({ name }) => name);
    const resultNames = [];
    const resultSets = [];
    directoryResultSets.forEach(({ name, ...resultsByGroupId }) => {
        const resultName = path.basename(name);
        utils_1.stdout(resultName);
        Object.entries(resultsByGroupId).forEach(([groupId, result]) => {
            const finalResults = utils_1.performCalculations(result);
            utils_1.stdout(groupId);
            utils_1.printCSV(finalResults);
            resultSets.push(finalResults);
        });
        utils_1.stdout();
        resultNames.push(resultName);
    });
    utils_1.printCSVSummary(resultNames, resultSets);
};
exports.default = main;
