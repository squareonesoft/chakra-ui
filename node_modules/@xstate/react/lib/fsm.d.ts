import { StateMachine, EventObject, Typestate } from '@xstate/fsm';
export declare function useMachine<TC extends object, TE extends EventObject = EventObject>(stateMachine: StateMachine.Machine<TC, TE, any>, options?: {
    actions?: StateMachine.ActionMap<TC, TE>;
}): [StateMachine.State<TC, TE, any>, StateMachine.Service<TC, TE>['send'], StateMachine.Service<TC, TE>];
export declare function useService<TContext extends object, TEvent extends EventObject = EventObject, TState extends Typestate<TContext> = any>(service: StateMachine.Service<TContext, TEvent, TState>): [StateMachine.State<TContext, TEvent, TState>, StateMachine.Service<TContext, TEvent, TState>['send'], StateMachine.Service<TContext, TEvent, TState>];
//# sourceMappingURL=fsm.d.ts.map