"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = require("react");
var xstate_1 = require("xstate");
var use_subscription_1 = require("use-subscription");
var useConstant_1 = require("./useConstant");
function useMachine(machine, options) {
    if (options === void 0) { options = {}; }
    if (process.env.NODE_ENV !== 'production') {
        var _a = __read(react_1.useState(machine), 1), initialMachine = _a[0];
        if (machine !== initialMachine) {
            console.warn('Machine given to `useMachine` has changed between renders. This is not supported and might lead to unexpected results.\n' +
                'Please make sure that you pass the same Machine as argument each time.');
        }
    }
    var context = options.context, guards = options.guards, actions = options.actions, activities = options.activities, services = options.services, delays = options.delays, rehydratedState = options.state, interpreterOptions = __rest(options, ["context", "guards", "actions", "activities", "services", "delays", "state"]);
    var service = useConstant_1.default(function () {
        var machineConfig = {
            context: context,
            guards: guards,
            actions: actions,
            activities: activities,
            services: services,
            delays: delays
        };
        var createdMachine = machine.withConfig(machineConfig, __assign(__assign({}, machine.context), context));
        return xstate_1.interpret(createdMachine, interpreterOptions).start(rehydratedState ? xstate_1.State.create(rehydratedState) : undefined);
    });
    var _b = __read(react_1.useState(service.state), 2), state = _b[0], setState = _b[1];
    react_1.useEffect(function () {
        service.onTransition(function (currentState) {
            if (currentState.changed) {
                setState(currentState);
            }
        });
        // if service.state has not changed React should just bail out from this update
        setState(service.state);
        return function () {
            service.stop();
        };
    }, []);
    // Make sure actions and services are kept updated when they change.
    // This mutation assignment is safe because the service instance is only used
    // in one place -- this hook's caller.
    react_1.useEffect(function () {
        Object.assign(service.machine.options.actions, actions);
    }, [actions]);
    react_1.useEffect(function () {
        Object.assign(service.machine.options.services, services);
    }, [services]);
    return [state, service.send, service];
}
exports.useMachine = useMachine;
function useService(service) {
    var subscription = react_1.useMemo(function () { return ({
        getCurrentValue: function () { return service.state || service.initialState; },
        subscribe: function (callback) {
            var unsubscribe = service.subscribe(function (state) {
                if (state.changed !== false) {
                    callback();
                }
            }).unsubscribe;
            return unsubscribe;
        }
    }); }, [service]);
    var state = use_subscription_1.useSubscription(subscription);
    return [state, service.send, service];
}
exports.useService = useService;
