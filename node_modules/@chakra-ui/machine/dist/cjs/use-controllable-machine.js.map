{"version":3,"sources":["../../src/use-controllable-machine.ts"],"names":["useUpdateEffect","effect","deps","mounted","React","useRef","useEffect","current","undefined","createControllableMachine","config","opts","on","INTERNAL_EVENTS","SYNC","actions","ctx","event","value","useControllableMachine","machine","props","valueProp","defaultValue","onChange","rest","isControlled","useState","valueState","context","setValue","nextValue","withContext","state","send","type"],"mappings":";;;;;AAAA;;AACA;;AAGA;;AACA;;;;;;;;AAEA,IAAMA,eAAuC,GAAG,SAA1CA,eAA0C,CAACC,MAAD,EAASC,IAAT,EAAkB;AAChE,MAAMC,OAAO,GAAGC,kBAAMC,MAAN,CAAa,KAAb,CAAhB;;AACAD,oBAAME,SAAN,CAAgB,YAAM;AACpB,QAAIH,OAAO,CAACI,OAAZ,EAAqB;AACnB,aAAON,MAAM,EAAb;AACD;;AACDE,IAAAA,OAAO,CAACI,OAAR,GAAkB,IAAlB;AACA,WAAOC,SAAP,CALoB,CAMpB;AACD,GAPD,EAOGN,IAPH;AAQD,CAVD;;AAgBO,IAAMO,yBAAyB,GAAG,SAA5BA,yBAA4B,CAKvCC,MALuC,EAMvCC,IANuC;AAAA;;AAAA,SAQvC,+CAEOD,MAFP;AAGIE,IAAAA,EAAE,eACGF,MAAM,CAACE,EADV,6BAECC,uBAAgBC,IAFjB,IAEwB;AACtBC,MAAAA,OAAO,EAAE,iBAACC,GAAD,EAAiBC,KAAjB,EAA2C;AAClDD,QAAAA,GAAG,CAACE,KAAJ,GAAYD,KAAK,CAACC,KAAlB;AACD;AAHqB,KAFxB;AAHN,MAYEP,IAZF,CARuC;AAAA,CAAlC;AAuBP;AACA;AACA;AACA;;;;;AAEO,IAAMQ,sBAAsB,GAAG,SAAzBA,sBAAyB,CAKpCC,OALoC,EAMpCC,KANoC,EAUjC;AAAA,MACYC,SADZ,GAC2DD,KAD3D,CACKH,KADL;AAAA,MACuBK,YADvB,GAC2DF,KAD3D,CACuBE,YADvB;AAAA,MACqCC,QADrC,GAC2DH,KAD3D,CACqCG,QADrC;AAAA,MACkDC,IADlD,iCAC2DJ,KAD3D;;AAEH,MAAMK,YAAY,GAAGJ,SAAS,KAAKd,SAAnC;;AAFG,wBAGkBJ,kBAAMuB,QAAN,CAAeJ,YAAf,CAHlB;AAAA,MAGIK,UAHJ;;AAIH,MAAMV,KAAK,GAAGQ,YAAY,GAAGJ,SAAH,GAAeM,UAAzC,CAJG,CAMH;;AANG,oBAOmB,6BAAW,YAAM;AACrC,QAAMC,OAAO,gBACRJ,IADQ;AAEXP,MAAAA,KAAK,EAALA,KAFW;AAGXY,MAAAA,QAHW,oBAGFC,SAHE,EAGqB;AAC9BP,QAAAA,QAAQ,QAAR,YAAAA,QAAQ,CAAGO,SAAH,CAAR;;AACA,YAAI,CAACL,YAAL,EAAmB;AACjB,eAAKR,KAAL,GAAaa,SAAb;AACD;AACF;AARU,MAAb;;AAUA,WAAOX,OAAO,CAACY,WAAR,CAAoBH,OAApB,CAAP;AACD,GAZqB,CAPnB;AAAA,MAOII,KAPJ;AAAA,MAOWC,IAPX;;AAqBHlC,EAAAA,eAAe,CAAC,YAAM;AACpBkC,IAAAA,IAAI,CAAC;AAAEC,MAAAA,IAAI,EAAEtB,uBAAgBC,IAAxB;AAA8BI,MAAAA,KAAK,EAAEI;AAArC,KAAD,CAAJ;AACD,GAFc,EAEZ,CAACA,SAAD,EAAYY,IAAZ,CAFY,CAAf;AAIA,SAAO,CAACD,KAAD,EAAQC,IAAR,CAAP;AACD,CApCM","sourcesContent":["import React from \"react\"\nimport { createMachine } from \"./create-machine\"\nimport { Machine } from \"./machine\"\nimport { StateMachine } from \"./types\"\nimport { useMachine } from \"./use-machine\"\nimport { INTERNAL_EVENTS } from \"./utils\"\n\nconst useUpdateEffect: typeof React.useEffect = (effect, deps) => {\n  const mounted = React.useRef(false)\n  React.useEffect(() => {\n    if (mounted.current) {\n      return effect()\n    }\n    mounted.current = true\n    return undefined\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, deps)\n}\n\ntype Extend<C extends { value: any }> = C & {\n  setValue?: (nextValue: C[\"value\"]) => void\n}\n\nexport const createControllableMachine = <\n  C extends { value: any },\n  S extends string,\n  E extends StateMachine.EventObject = StateMachine.AnyEventObject\n>(\n  config: StateMachine.MachineConfig<Extend<C>, S, E>,\n  opts?: StateMachine.MachineOptions<Extend<C>, E>,\n) =>\n  createMachine<Extend<C>, S, E>(\n    {\n      ...config,\n      on: {\n        ...config.on,\n        [INTERNAL_EVENTS.SYNC]: {\n          actions: (ctx: Extend<C>, event: { value: any }) => {\n            ctx.value = event.value\n          },\n        },\n      },\n    },\n    opts,\n  )\n\n/**\n * Takes a machine that has `value` in its context and makes it controllable\n * by handling `value`, `defaultValue` and `onChange`\n */\n\nexport const useControllableMachine = <\n  C extends Extend<{ value: any }>,\n  S extends string,\n  E extends StateMachine.EventObject = StateMachine.AnyEventObject\n>(\n  machine: Machine<C, S, E>,\n  props: Partial<C> & {\n    defaultValue?: C[\"value\"] | (() => C[\"value\"])\n    onChange?: (nextValue: C[\"value\"]) => void\n  },\n) => {\n  const { value: valueProp, defaultValue, onChange, ...rest } = props\n  const isControlled = valueProp !== undefined\n  const [valueState] = React.useState(defaultValue)\n  const value = isControlled ? valueProp : valueState\n\n  //@ts-expect-error\n  const [state, send] = useMachine(() => {\n    const context = {\n      ...rest,\n      value,\n      setValue(nextValue: C[\"value\"]) {\n        onChange?.(nextValue)\n        if (!isControlled) {\n          this.value = nextValue\n        }\n      },\n    }\n    return machine.withContext(context as any)\n  })\n\n  useUpdateEffect(() => {\n    send({ type: INTERNAL_EVENTS.SYNC, value: valueProp })\n  }, [valueProp, send])\n\n  return [state, send] as const\n}\n"],"file":"use-controllable-machine.js"}