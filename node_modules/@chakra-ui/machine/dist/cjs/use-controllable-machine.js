"use strict";

exports.__esModule = true;
exports.useControllableMachine = exports.createControllableMachine = void 0;

var _react = _interopRequireDefault(require("react"));

var _createMachine = require("./create-machine");

var _useMachine2 = require("./use-machine");

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var useUpdateEffect = function useUpdateEffect(effect, deps) {
  var mounted = _react["default"].useRef(false);

  _react["default"].useEffect(function () {
    if (mounted.current) {
      return effect();
    }

    mounted.current = true;
    return undefined; // eslint-disable-next-line react-hooks/exhaustive-deps
  }, deps);
};

var createControllableMachine = function createControllableMachine(config, opts) {
  var _extends2;

  return (0, _createMachine.createMachine)(_extends({}, config, {
    on: _extends({}, config.on, (_extends2 = {}, _extends2[_utils.INTERNAL_EVENTS.SYNC] = {
      actions: function actions(ctx, event) {
        ctx.value = event.value;
      }
    }, _extends2))
  }), opts);
};
/**
 * Takes a machine that has `value` in its context and makes it controllable
 * by handling `value`, `defaultValue` and `onChange`
 */


exports.createControllableMachine = createControllableMachine;

var useControllableMachine = function useControllableMachine(machine, props) {
  var valueProp = props.value,
      defaultValue = props.defaultValue,
      onChange = props.onChange,
      rest = _objectWithoutPropertiesLoose(props, ["value", "defaultValue", "onChange"]);

  var isControlled = valueProp !== undefined;

  var _React$useState = _react["default"].useState(defaultValue),
      valueState = _React$useState[0];

  var value = isControlled ? valueProp : valueState; //@ts-expect-error

  var _useMachine = (0, _useMachine2.useMachine)(function () {
    var context = _extends({}, rest, {
      value: value,
      setValue: function setValue(nextValue) {
        onChange == null ? void 0 : onChange(nextValue);

        if (!isControlled) {
          this.value = nextValue;
        }
      }
    });

    return machine.withContext(context);
  }),
      state = _useMachine[0],
      send = _useMachine[1];

  useUpdateEffect(function () {
    send({
      type: _utils.INTERNAL_EVENTS.SYNC,
      value: valueProp
    });
  }, [valueProp, send]);
  return [state, send];
};

exports.useControllableMachine = useControllableMachine;
//# sourceMappingURL=use-controllable-machine.js.map