"use strict";

exports.__esModule = true;
exports.toEvent = toEvent;
exports.toTarget = toTarget;
exports.toTransition = toTransition;
exports.isGuardHelper = isGuardHelper;
exports.toComputed = exports.MACHINE_TYPES = exports.INTERNAL_EVENTS = exports.toArray = exports.keys = exports.isFunction = exports.isObject = exports.isArray = exports.isString = void 0;

var isString = function isString(value) {
  return typeof value === "string";
};

exports.isString = isString;

var isArray = function isArray(value) {
  return Array.isArray(value);
};

exports.isArray = isArray;

var isObject = function isObject(value) {
  return value != null && typeof value === "object" && !isArray(value);
};

exports.isObject = isObject;

var isFunction = function isFunction(value) {
  return typeof value === "function";
};

exports.isFunction = isFunction;

var keys = function keys(value) {
  return Object.keys(value);
};

exports.keys = keys;

var toArray = function toArray(v) {
  if (v === void 0) {
    v = [];
  }

  return isArray(v) ? v : [v];
};

exports.toArray = toArray;

function toEvent(event) {
  return isString(event) ? {
    type: event
  } : event;
}

function toTarget(target) {
  return isString(target) ? {
    target: target
  } : target;
}

function toTransition(transition, currentState) {
  var _transition = isString(transition) ? toTarget(transition) : transition;

  var check = function check(t) {
    var isTargetless = t.actions && !t.target;
    if (isTargetless && currentState) t.target = currentState;
    return t;
  };

  if (isArray(_transition)) {
    return _transition.map(check);
  }

  if (isObject(_transition)) {
    return check(_transition);
  }
}

var INTERNAL_EVENTS = {
  INIT: "machine.init",
  AFTER: "machine.after",
  EVERY: "machine.every",
  SEND_PARENT: "machine.send-parent",
  STOP: "machine.stop",
  SYNC: "machine.sync"
};
exports.INTERNAL_EVENTS = INTERNAL_EVENTS;
var MACHINE_TYPES = {
  MACHINE: "machine",
  ACTOR: "machine.actor"
};
exports.MACHINE_TYPES = MACHINE_TYPES;

var toComputed = function toComputed(obj) {
  if (obj === void 0) {
    obj = {};
  }

  return Object.fromEntries(Object.entries(obj).map(function (_ref) {
    var k = _ref[0],
        v = _ref[1];
    return [k, function (state) {
      return v(state.context);
    }];
  }));
};

exports.toComputed = toComputed;

function isGuardHelper(value) {
  return isObject(value) && value.exec != null;
}
//# sourceMappingURL=utils.js.map