{"version":3,"sources":["../../src/assign.ts"],"names":["runIfFn","value","args","assign","objectOrFunction","fn","ctx","evt","values","key"],"mappings":";;;;;AAAA,IAAMA,OAAO,GAAG,SAAVA,OAAU,CAACC,KAAD;AAAA,oCAAgBC,IAAhB;AAAgBA,IAAAA,IAAhB;AAAA;;AAAA,SACd,OAAOD,KAAP,KAAiB,UAAjB,GAA8BA,KAAK,MAAL,SAASC,IAAT,CAA9B,GAA+CD,KADjC;AAAA,CAAhB;;AAsBO,SAASE,MAAT,CACLC,gBADK,EAEL;AACA,MAAMC,EAAE,GAAG,SAALA,EAAK,CAACC,GAAD,EAAWC,GAAX,EAAwB;AACjC,QAAMC,MAAM,GAAGR,OAAO,CAACI,gBAAD,EAAmBE,GAAnB,EAAwBC,GAAxB,CAAtB;;AACA,SAAK,IAAME,GAAX,IAAkBD,MAAlB,EAA0B;AACxBF,MAAAA,GAAG,CAACG,GAAD,CAAH,GAAWT,OAAO,CAACQ,MAAM,CAACC,GAAD,CAAP,EAAcH,GAAd,EAAmBC,GAAnB,CAAlB;AACD;AACF,GALD;;AAMA,SAAOF,EAAP;AACD","sourcesContent":["const runIfFn = (value: any, ...args: any[]) =>\n  typeof value === \"function\" ? value(...args) : value\n\ntype AssignObject<T extends (...args: any[]) => any> = {\n  [P in keyof Parameters<T>[0]]?:\n    | undefined\n    | ((context: Parameters<T>[0], event: any) => Parameters<T>[0][P])\n    | Parameters<T>[0][P]\n}\n\ntype AssignFunction<T extends (...args: any[]) => any> = (\n  context: Parameters<T>[0],\n  event: any,\n) => Partial<Parameters<T>[0]>\n\ntype ActionFn = (context: any, event: any) => any\ntype Action = string | ActionFn\n\ntype AssignArgs<T extends ActionFn> = AssignObject<T> | AssignFunction<T>\n\ntype Flat<T extends Action | Action[]> = T extends any[] ? T[0] : T\n\nexport function assign<T extends Action | Action[]>(\n  objectOrFunction: AssignArgs<Exclude<Flat<T>, string>>,\n) {\n  const fn = (ctx: any, evt: any) => {\n    const values = runIfFn(objectOrFunction, ctx, evt)\n    for (const key in values) {\n      ctx[key] = runIfFn(values[key], ctx, evt)\n    }\n  }\n  return fn as Exclude<Flat<T>, string>\n}\n"],"file":"assign.js"}