function or() {
  for (var _len = arguments.length, conditions = new Array(_len), _key = 0; _key < _len; _key++) {
    conditions[_key] = arguments[_key];
  }

  return {
    exec: guards => (ctx, event) => conditions.some(condition => {
      if (typeof condition === "string") {
        var _guards$condition;

        return (_guards$condition = guards[condition]) == null ? void 0 : _guards$condition.call(guards, ctx, event);
      }

      return condition.exec(guards)(ctx, event);
    })
  };
}

function and() {
  for (var _len2 = arguments.length, conditions = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    conditions[_key2] = arguments[_key2];
  }

  return {
    exec: guards => (ctx, event) => conditions.every(condition => {
      if (typeof condition === "string") {
        var _guards$condition2;

        return (_guards$condition2 = guards[condition]) == null ? void 0 : _guards$condition2.call(guards, ctx, event);
      }

      return condition.exec(guards)(ctx, event);
    })
  };
}

function not(condition) {
  return {
    exec: guards => (ctx, event) => {
      if (typeof condition === "string") {
        var _guards$condition3;

        return !((_guards$condition3 = guards[condition]) != null && _guards$condition3.call(guards, ctx, event));
      }

      return !condition.exec(guards)(ctx, event);
    }
  };
}

export var guards = {
  or,
  and,
  not
};
//# sourceMappingURL=guards.js.map