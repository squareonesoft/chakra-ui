{"version":3,"sources":["../../src/use-controllable-machine.ts"],"names":["React","createMachine","useMachine","INTERNAL_EVENTS","useUpdateEffect","effect","deps","mounted","useRef","useEffect","current","undefined","createControllableMachine","config","opts","on","SYNC","actions","ctx","event","value","useControllableMachine","machine","props","valueProp","defaultValue","onChange","rest","isControlled","valueState","useState","state","send","context","setValue","nextValue","withContext","type"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,QAA8B,kBAA9B;AAGA,SAASC,UAAT,QAA2B,eAA3B;AACA,SAASC,eAAT,QAAgC,SAAhC;;AAEA,IAAMC,eAAuC,GAAG,CAACC,MAAD,EAASC,IAAT,KAAkB;AAChE,MAAMC,OAAO,GAAGP,KAAK,CAACQ,MAAN,CAAa,KAAb,CAAhB;AACAR,EAAAA,KAAK,CAACS,SAAN,CAAgB,MAAM;AACpB,QAAIF,OAAO,CAACG,OAAZ,EAAqB;AACnB,aAAOL,MAAM,EAAb;AACD;;AACDE,IAAAA,OAAO,CAACG,OAAR,GAAkB,IAAlB;AACA,WAAOC,SAAP,CALoB,CAMpB;AACD,GAPD,EAOGL,IAPH;AAQD,CAVD;;AAgBA,OAAO,IAAMM,yBAAyB,GAAG,CAKvCC,MALuC,EAMvCC,IANuC,KAQvCb,aAAa,cAENY,MAFM;AAGTE,EAAAA,EAAE,eACGF,MAAM,CAACE,EADV;AAEA,KAACZ,eAAe,CAACa,IAAjB,GAAwB;AACtBC,MAAAA,OAAO,EAAE,CAACC,GAAD,EAAiBC,KAAjB,KAA2C;AAClDD,QAAAA,GAAG,CAACE,KAAJ,GAAYD,KAAK,CAACC,KAAlB;AACD;AAHqB;AAFxB;AAHO,IAYXN,IAZW,CARR;AAuBP;AACA;AACA;AACA;;AAEA,OAAO,IAAMO,sBAAsB,GAAG,CAKpCC,OALoC,EAMpCC,KANoC,KAUjC;AACH,MAAM;AAAEH,IAAAA,KAAK,EAAEI,SAAT;AAAoBC,IAAAA,YAApB;AAAkCC,IAAAA;AAAlC,MAAwDH,KAA9D;AAAA,MAAqDI,IAArD,iCAA8DJ,KAA9D;;AACA,MAAMK,YAAY,GAAGJ,SAAS,KAAKb,SAAnC;AACA,MAAM,CAACkB,UAAD,IAAe7B,KAAK,CAAC8B,QAAN,CAAeL,YAAf,CAArB;AACA,MAAML,KAAK,GAAGQ,YAAY,GAAGJ,SAAH,GAAeK,UAAzC,CAJG,CAMH;;AACA,MAAM,CAACE,KAAD,EAAQC,IAAR,IAAgB9B,UAAU,CAAC,MAAM;AACrC,QAAM+B,OAAO,gBACRN,IADQ;AAEXP,MAAAA,KAFW;;AAGXc,MAAAA,QAAQ,CAACC,SAAD,EAAwB;AAC9BT,QAAAA,QAAQ,QAAR,YAAAA,QAAQ,CAAGS,SAAH,CAAR;;AACA,YAAI,CAACP,YAAL,EAAmB;AACjB,eAAKR,KAAL,GAAae,SAAb;AACD;AACF;;AARU,MAAb;;AAUA,WAAOb,OAAO,CAACc,WAAR,CAAoBH,OAApB,CAAP;AACD,GAZ+B,CAAhC;AAcA7B,EAAAA,eAAe,CAAC,MAAM;AACpB4B,IAAAA,IAAI,CAAC;AAAEK,MAAAA,IAAI,EAAElC,eAAe,CAACa,IAAxB;AAA8BI,MAAAA,KAAK,EAAEI;AAArC,KAAD,CAAJ;AACD,GAFc,EAEZ,CAACA,SAAD,EAAYQ,IAAZ,CAFY,CAAf;AAIA,SAAO,CAACD,KAAD,EAAQC,IAAR,CAAP;AACD,CApCM","sourcesContent":["import React from \"react\"\nimport { createMachine } from \"./create-machine\"\nimport { Machine } from \"./machine\"\nimport { StateMachine } from \"./types\"\nimport { useMachine } from \"./use-machine\"\nimport { INTERNAL_EVENTS } from \"./utils\"\n\nconst useUpdateEffect: typeof React.useEffect = (effect, deps) => {\n  const mounted = React.useRef(false)\n  React.useEffect(() => {\n    if (mounted.current) {\n      return effect()\n    }\n    mounted.current = true\n    return undefined\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, deps)\n}\n\ntype Extend<C extends { value: any }> = C & {\n  setValue?: (nextValue: C[\"value\"]) => void\n}\n\nexport const createControllableMachine = <\n  C extends { value: any },\n  S extends string,\n  E extends StateMachine.EventObject = StateMachine.AnyEventObject\n>(\n  config: StateMachine.MachineConfig<Extend<C>, S, E>,\n  opts?: StateMachine.MachineOptions<Extend<C>, E>,\n) =>\n  createMachine<Extend<C>, S, E>(\n    {\n      ...config,\n      on: {\n        ...config.on,\n        [INTERNAL_EVENTS.SYNC]: {\n          actions: (ctx: Extend<C>, event: { value: any }) => {\n            ctx.value = event.value\n          },\n        },\n      },\n    },\n    opts,\n  )\n\n/**\n * Takes a machine that has `value` in its context and makes it controllable\n * by handling `value`, `defaultValue` and `onChange`\n */\n\nexport const useControllableMachine = <\n  C extends Extend<{ value: any }>,\n  S extends string,\n  E extends StateMachine.EventObject = StateMachine.AnyEventObject\n>(\n  machine: Machine<C, S, E>,\n  props: Partial<C> & {\n    defaultValue?: C[\"value\"] | (() => C[\"value\"])\n    onChange?: (nextValue: C[\"value\"]) => void\n  },\n) => {\n  const { value: valueProp, defaultValue, onChange, ...rest } = props\n  const isControlled = valueProp !== undefined\n  const [valueState] = React.useState(defaultValue)\n  const value = isControlled ? valueProp : valueState\n\n  //@ts-expect-error\n  const [state, send] = useMachine(() => {\n    const context = {\n      ...rest,\n      value,\n      setValue(nextValue: C[\"value\"]) {\n        onChange?.(nextValue)\n        if (!isControlled) {\n          this.value = nextValue\n        }\n      },\n    }\n    return machine.withContext(context as any)\n  })\n\n  useUpdateEffect(() => {\n    send({ type: INTERNAL_EVENTS.SYNC, value: valueProp })\n  }, [valueProp, send])\n\n  return [state, send] as const\n}\n"],"file":"use-controllable-machine.js"}