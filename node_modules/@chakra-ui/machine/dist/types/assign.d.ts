declare type AssignObject<T extends (...args: any[]) => any> = {
    [P in keyof Parameters<T>[0]]?: undefined | ((context: Parameters<T>[0], event: any) => Parameters<T>[0][P]) | Parameters<T>[0][P];
};
declare type AssignFunction<T extends (...args: any[]) => any> = (context: Parameters<T>[0], event: any) => Partial<Parameters<T>[0]>;
declare type ActionFn = (context: any, event: any) => any;
declare type Action = string | ActionFn;
declare type AssignArgs<T extends ActionFn> = AssignObject<T> | AssignFunction<T>;
declare type Flat<T extends Action | Action[]> = T extends any[] ? T[0] : T;
export declare function assign<T extends Action | Action[]>(objectOrFunction: AssignArgs<Exclude<Flat<T>, string>>): Exclude<Flat<T>, string>;
export {};
//# sourceMappingURL=assign.d.ts.map