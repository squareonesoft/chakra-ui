import { Dict, StateMachine } from "./types";
declare function or<TContext extends Dict, TEvent extends StateMachine.EventObject>(...conditions: Array<string | StateMachine.ConditionHelper<TContext, TEvent>>): StateMachine.ConditionHelper<TContext, TEvent>;
declare function and<TContext extends Dict, TEvent extends StateMachine.EventObject>(...conditions: Array<string | StateMachine.ConditionHelper<TContext, TEvent>>): StateMachine.ConditionHelper<TContext, TEvent>;
declare function not<TContext extends Dict, TEvent extends StateMachine.EventObject>(condition: string | StateMachine.ConditionHelper<TContext, TEvent>): StateMachine.ConditionHelper<TContext, TEvent>;
export declare const guards: {
    or: typeof or;
    and: typeof and;
    not: typeof not;
};
export {};
//# sourceMappingURL=guards.d.ts.map