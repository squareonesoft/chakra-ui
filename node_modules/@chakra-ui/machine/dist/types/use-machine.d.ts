import { MachineSrc } from "./machine";
import { Dict } from "./types";
export declare function useMachine<C extends Dict, S extends string>(getMachine: MachineSrc<C, S>): readonly [{
    [x: string]: any;
    current: string;
    prev: string;
    event: string | string[];
    context: import("valtio").NonPromise<C>;
    done: boolean;
    matches: (value: string | string[]) => boolean;
    hasTag: (value: string) => boolean;
    nextEvents: string[];
    changed: boolean;
    tags: {
        add: (value: string) => Set<string>;
        clear: () => void;
        delete: (value: string) => boolean;
        forEach: (callbackfn: (value: string, value2: string, set: Set<string>) => void, thisArg?: any) => void;
        has: (value: string) => boolean;
        readonly size: number;
        entries: () => IterableIterator<[string, string]>;
        keys: () => IterableIterator<string>;
        values: () => IterableIterator<string>;
    };
}, (evt: string | import("./types").StateMachine.AnyEventObject) => void, import("./machine").Machine<C, S, import("./types").StateMachine.AnyEventObject>];
//# sourceMappingURL=use-machine.d.ts.map