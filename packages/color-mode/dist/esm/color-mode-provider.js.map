{"version":3,"sources":["../../src/color-mode-provider.tsx"],"names":["useEnvironment","isBrowser","noop","__DEV__","React","addListener","getColorScheme","root","syncBodyClassName","localStorageManager","ColorModeContext","createContext","displayName","useColorMode","context","useContext","undefined","Error","ColorModeProvider","props","value","children","options","useSystemColorMode","initialColorMode","colorModeManager","colorMode","rawSetColorMode","useState","type","get","document","useEffect","mode","isDark","set","setColorMode","useCallback","toggleColorMode","removeListener","useMemo","DarkMode","LightMode","useColorModeValue","light","dark"],"mappings":";;AAAA,SAASA,cAAT,QAA+B,sBAA/B;AACA,SAASC,SAAT,EAAoBC,IAApB,EAA0BC,OAA1B,QAAyC,kBAAzC;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SACEC,WADF,EAGEC,cAHF,EAIEC,IAJF,EAKEC,iBALF,QAMO,oBANP;AAOA,SAASC,mBAAT,QAAoD,mBAApD;AAeA,OAAO,IAAMC,gBAAgB,gBAAGN,KAAK,CAACO,aAAN,CAAoB,EAApB,CAAzB;;AAEP,IAAIR,OAAJ,EAAa;AACXO,EAAAA,gBAAgB,CAACE,WAAjB,GAA+B,kBAA/B;AACD;AAED;AACA;AACA;AACA;;;AACA,OAAO,IAAMC,YAAY,GAAG,MAAM;AAChC,MAAMC,OAAO,GAAGV,KAAK,CAACW,UAAN,CAAiBL,gBAAjB,CAAhB;;AACA,MAAII,OAAO,KAAKE,SAAhB,EAA2B;AACzB,UAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACD;;AACD,SAAOH,OAAP;AACD,CANM;;AAeP;AACA;AACA;AACA;AACA,OAAO,SAASI,iBAAT,CAA2BC,KAA3B,EAA0D;AAC/D,MAAM;AACJC,IAAAA,KADI;AAEJC,IAAAA,QAFI;AAGJC,IAAAA,OAAO,EAAE;AAAEC,MAAAA,kBAAF;AAAsBC,MAAAA;AAAtB,KAHL;AAIJC,IAAAA,gBAAgB,GAAGhB;AAJf,MAKFU,KALJ;AAOA;AACF;AACA;AACA;AACA;AACA;;AACE,MAAM,CAACO,SAAD,EAAYC,eAAZ,IAA+BvB,KAAK,CAACwB,QAAN,CACnCH,gBAAgB,CAACI,IAAjB,KAA0B,QAA1B,GACIJ,gBAAgB,CAACK,GAAjB,CAAqBN,gBAArB,CADJ,GAEIA,gBAH+B,CAArC;AAMA,MAAM;AAAEO,IAAAA;AAAF,MAAe/B,cAAc,EAAnC;AAEAI,EAAAA,KAAK,CAAC4B,SAAN,CAAgB,MAAM;AACpB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,QAAI/B,SAAS,IAAIwB,gBAAgB,CAACI,IAAjB,KAA0B,cAA3C,EAA2D;AACzD,UAAMI,IAAI,GAAGV,kBAAkB,GAC3BjB,cAAc,CAACkB,gBAAD,CADa,GAE3BjB,IAAI,CAACuB,GAAL,MAAcL,gBAAgB,CAACK,GAAjB,EAFlB;;AAIA,UAAIG,IAAJ,EAAU;AACRN,QAAAA,eAAe,CAACM,IAAD,CAAf;AACD;AACF;AACF,GAnBD,EAmBG,CAACR,gBAAD,EAAmBF,kBAAnB,EAAuCC,gBAAvC,CAnBH;AAqBApB,EAAAA,KAAK,CAAC4B,SAAN,CAAgB,MAAM;AACpB,QAAME,MAAM,GAAGR,SAAS,KAAK,MAA7B;AAEAlB,IAAAA,iBAAiB,CAAC0B,MAAD,EAASH,QAAT,CAAjB;AACAxB,IAAAA,IAAI,CAAC4B,GAAL,CAASD,MAAM,GAAG,MAAH,GAAY,OAA3B;AACD,GALD,EAKG,CAACR,SAAD,EAAYK,QAAZ,CALH;AAOA,MAAMK,YAAY,GAAGhC,KAAK,CAACiC,WAAN,CAClBjB,KAAD,IAAsB;AACpBK,IAAAA,gBAAgB,CAACU,GAAjB,CAAqBf,KAArB;AACAO,IAAAA,eAAe,CAACP,KAAD,CAAf;AACD,GAJkB,EAKnB,CAACK,gBAAD,CALmB,CAArB;AAQA,MAAMa,eAAe,GAAGlC,KAAK,CAACiC,WAAN,CAAkB,MAAM;AAC9CD,IAAAA,YAAY,CAACV,SAAS,KAAK,OAAd,GAAwB,MAAxB,GAAiC,OAAlC,CAAZ;AACD,GAFuB,EAErB,CAACA,SAAD,EAAYU,YAAZ,CAFqB,CAAxB;AAIAhC,EAAAA,KAAK,CAAC4B,SAAN,CAAgB,MAAM;AACpB,QAAIO,cAAJ;;AACA,QAAIhB,kBAAJ,EAAwB;AACtBgB,MAAAA,cAAc,GAAGlC,WAAW,CAAC+B,YAAD,CAA5B;AACD;;AACD,WAAO,MAAM;AACX,UAAIG,cAAc,IAAIhB,kBAAtB,EAA0C;AACxCgB,QAAAA,cAAc;AACf;AACF,KAJD;AAKD,GAVD,EAUG,CAACH,YAAD,EAAeb,kBAAf,CAVH,EA9D+D,CA0E/D;;AACA,MAAMT,OAAO,GAAGV,KAAK,CAACoC,OAAN,CACd,OAAO;AACLd,IAAAA,SAAS,EAAGN,KAAH,WAAGA,KAAH,GAAYM,SADhB;AAELY,IAAAA,eAAe,EAAElB,KAAK,GAAGlB,IAAH,GAAUoC,eAF3B;AAGLF,IAAAA,YAAY,EAAEhB,KAAK,GAAGlB,IAAH,GAAUkC;AAHxB,GAAP,CADc,EAMd,CAACV,SAAD,EAAYU,YAAZ,EAA0BE,eAA1B,EAA2ClB,KAA3C,CANc,CAAhB;AASA,sBACE,oBAAC,gBAAD,CAAkB,QAAlB;AAA2B,IAAA,KAAK,EAAEN;AAAlC,KACGO,QADH,CADF;AAKD;;AAED,IAAIlB,OAAJ,EAAa;AACXe,EAAAA,iBAAiB,CAACN,WAAlB,GAAgC,mBAAhC;AACD;AAED;AACA;AACA;;;AACA,OAAO,IAAM6B,QAAkB,GAAItB,KAAD,iBAChC,oBAAC,gBAAD,CAAkB,QAAlB;AACE,EAAA,KAAK,EAAE;AAAEO,IAAAA,SAAS,EAAE,MAAb;AAAqBY,IAAAA,eAAe,EAAEpC,IAAtC;AAA4CkC,IAAAA,YAAY,EAAElC;AAA1D;AADT,GAEMiB,KAFN,EADK;;AAOP,IAAIhB,OAAJ,EAAa;AACXsC,EAAAA,QAAQ,CAAC7B,WAAT,GAAuB,UAAvB;AACD;AAED;AACA;AACA;;;AACA,OAAO,IAAM8B,SAAmB,GAAIvB,KAAD,iBACjC,oBAAC,gBAAD,CAAkB,QAAlB;AACE,EAAA,KAAK,EAAE;AAAEO,IAAAA,SAAS,EAAE,OAAb;AAAsBY,IAAAA,eAAe,EAAEpC,IAAvC;AAA6CkC,IAAAA,YAAY,EAAElC;AAA3D;AADT,GAEMiB,KAFN,EADK;;AAOP,IAAIhB,OAAJ,EAAa;AACXuC,EAAAA,SAAS,CAAC9B,WAAV,GAAwB,WAAxB;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,SAAS+B,iBAAT,CACLC,KADK,EAELC,IAFK,EAGL;AACA,MAAM;AAAEnB,IAAAA;AAAF,MAAgBb,YAAY,EAAlC;AACA,SAAOa,SAAS,KAAK,MAAd,GAAuBmB,IAAvB,GAA8BD,KAArC;AACD","sourcesContent":["import { useEnvironment } from \"@chakra-ui/react-env\"\nimport { isBrowser, noop, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport {\n  addListener,\n  ColorMode,\n  getColorScheme,\n  root,\n  syncBodyClassName,\n} from \"./color-mode.utils\"\nimport { localStorageManager, StorageManager } from \"./storage-manager\"\n\nexport type { ColorMode }\n\nexport interface ColorModeOptions {\n  initialColorMode?: ColorMode\n  useSystemColorMode?: boolean\n}\n\ninterface ColorModeContextType {\n  colorMode: ColorMode\n  toggleColorMode: () => void\n  setColorMode: (value: any) => void\n}\n\nexport const ColorModeContext = React.createContext({} as ColorModeContextType)\n\nif (__DEV__) {\n  ColorModeContext.displayName = \"ColorModeContext\"\n}\n\n/**\n * React hook that reads from `ColorModeProvider` context\n * Returns the color mode and function to toggle it\n */\nexport const useColorMode = () => {\n  const context = React.useContext(ColorModeContext)\n  if (context === undefined) {\n    throw new Error(\"useColorMode must be used within a ColorModeProvider\")\n  }\n  return context\n}\n\nexport interface ColorModeProviderProps {\n  value?: ColorMode\n  children?: React.ReactNode\n  options: ColorModeOptions\n  colorModeManager?: StorageManager\n}\n\n/**\n * Provides context for the color mode based on config in `theme`\n * Returns the color mode and function to toggle the color mode\n */\nexport function ColorModeProvider(props: ColorModeProviderProps) {\n  const {\n    value,\n    children,\n    options: { useSystemColorMode, initialColorMode },\n    colorModeManager = localStorageManager,\n  } = props\n\n  /**\n   * Only attempt to retrieve if we're on the server. Else this will result\n   * in a hydration mismatch warning and partially invalid visuals.\n   *\n   * Else fallback safely to `theme.config.initialColormode` (default light)\n   */\n  const [colorMode, rawSetColorMode] = React.useState<ColorMode | undefined>(\n    colorModeManager.type === \"cookie\"\n      ? colorModeManager.get(initialColorMode)\n      : initialColorMode,\n  )\n\n  const { document } = useEnvironment()\n\n  React.useEffect(() => {\n    /**\n     * Since we cannot initially retrieve localStorage to due above mentioned\n     * reasons, do so after hydration.\n     *\n     * Priority:\n     * - system color mode\n     * - defined value on <ColorModeScript />, if present\n     * - previously stored value\n     */\n    if (isBrowser && colorModeManager.type === \"localStorage\") {\n      const mode = useSystemColorMode\n        ? getColorScheme(initialColorMode)\n        : root.get() || colorModeManager.get()\n\n      if (mode) {\n        rawSetColorMode(mode)\n      }\n    }\n  }, [colorModeManager, useSystemColorMode, initialColorMode])\n\n  React.useEffect(() => {\n    const isDark = colorMode === \"dark\"\n\n    syncBodyClassName(isDark, document)\n    root.set(isDark ? \"dark\" : \"light\")\n  }, [colorMode, document])\n\n  const setColorMode = React.useCallback(\n    (value: ColorMode) => {\n      colorModeManager.set(value)\n      rawSetColorMode(value)\n    },\n    [colorModeManager],\n  )\n\n  const toggleColorMode = React.useCallback(() => {\n    setColorMode(colorMode === \"light\" ? \"dark\" : \"light\")\n  }, [colorMode, setColorMode])\n\n  React.useEffect(() => {\n    let removeListener: any\n    if (useSystemColorMode) {\n      removeListener = addListener(setColorMode)\n    }\n    return () => {\n      if (removeListener && useSystemColorMode) {\n        removeListener()\n      }\n    }\n  }, [setColorMode, useSystemColorMode])\n\n  // presence of `value` indicates a controlled context\n  const context = React.useMemo(\n    () => ({\n      colorMode: (value ?? colorMode) as ColorMode,\n      toggleColorMode: value ? noop : toggleColorMode,\n      setColorMode: value ? noop : setColorMode,\n    }),\n    [colorMode, setColorMode, toggleColorMode, value],\n  )\n\n  return (\n    <ColorModeContext.Provider value={context}>\n      {children}\n    </ColorModeContext.Provider>\n  )\n}\n\nif (__DEV__) {\n  ColorModeProvider.displayName = \"ColorModeProvider\"\n}\n\n/**\n * Locks the color mode to `dark`, without any way to change it.\n */\nexport const DarkMode: React.FC = (props) => (\n  <ColorModeContext.Provider\n    value={{ colorMode: \"dark\", toggleColorMode: noop, setColorMode: noop }}\n    {...props}\n  />\n)\n\nif (__DEV__) {\n  DarkMode.displayName = \"DarkMode\"\n}\n\n/**\n * Locks the color mode to `light` without any way to change it.\n */\nexport const LightMode: React.FC = (props) => (\n  <ColorModeContext.Provider\n    value={{ colorMode: \"light\", toggleColorMode: noop, setColorMode: noop }}\n    {...props}\n  />\n)\n\nif (__DEV__) {\n  LightMode.displayName = \"LightMode\"\n}\n\n/**\n * Change value based on color mode.\n *\n * @param light the light mode value\n * @param dark the dark mode value\n *\n * @example\n *\n * ```js\n * const Icon = useColorModeValue(MoonIcon, SunIcon)\n * ```\n */\nexport function useColorModeValue<TLight = unknown, TDark = unknown>(\n  light: TLight,\n  dark: TDark,\n) {\n  const { colorMode } = useColorMode()\n  return colorMode === \"dark\" ? dark : light\n}\n"],"file":"color-mode-provider.js"}