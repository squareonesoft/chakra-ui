{"version":3,"sources":["../../src/color-mode-provider.tsx"],"names":["ColorModeContext","React","createContext","__DEV__","displayName","useColorMode","context","useContext","undefined","Error","ColorModeProvider","props","value","children","options","useSystemColorMode","initialColorMode","colorModeManager","localStorageManager","useState","type","get","colorMode","rawSetColorMode","document","useEffect","isBrowser","mode","root","isDark","set","setColorMode","useCallback","toggleColorMode","removeListener","useMemo","noop","DarkMode","LightMode","useColorModeValue","light","dark"],"mappings":"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","sourcesContent":["import { useEnvironment } from \"@chakra-ui/react-env\"\nimport { isBrowser, noop, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport {\n  addListener,\n  ColorMode,\n  getColorScheme,\n  root,\n  syncBodyClassName,\n} from \"./color-mode.utils\"\nimport { localStorageManager, StorageManager } from \"./storage-manager\"\n\nexport type { ColorMode }\n\nexport interface ColorModeOptions {\n  initialColorMode?: ColorMode\n  useSystemColorMode?: boolean\n}\n\ninterface ColorModeContextType {\n  colorMode: ColorMode\n  toggleColorMode: () => void\n  setColorMode: (value: any) => void\n}\n\nexport const ColorModeContext = React.createContext({} as ColorModeContextType)\n\nif (__DEV__) {\n  ColorModeContext.displayName = \"ColorModeContext\"\n}\n\n/**\n * React hook that reads from `ColorModeProvider` context\n * Returns the color mode and function to toggle it\n */\nexport const useColorMode = () => {\n  const context = React.useContext(ColorModeContext)\n  if (context === undefined) {\n    throw new Error(\"useColorMode must be used within a ColorModeProvider\")\n  }\n  return context\n}\n\nexport interface ColorModeProviderProps {\n  value?: ColorMode\n  children?: React.ReactNode\n  options: ColorModeOptions\n  colorModeManager?: StorageManager\n}\n\n/**\n * Provides context for the color mode based on config in `theme`\n * Returns the color mode and function to toggle the color mode\n */\nexport function ColorModeProvider(props: ColorModeProviderProps) {\n  const {\n    value,\n    children,\n    options: { useSystemColorMode, initialColorMode },\n    colorModeManager = localStorageManager,\n  } = props\n\n  /**\n   * Only attempt to retrieve if we're on the server. Else this will result\n   * in a hydration mismatch warning and partially invalid visuals.\n   *\n   * Else fallback safely to `theme.config.initialColormode` (default light)\n   */\n  const [colorMode, rawSetColorMode] = React.useState<ColorMode | undefined>(\n    colorModeManager.type === \"cookie\"\n      ? colorModeManager.get(initialColorMode)\n      : initialColorMode,\n  )\n\n  const { document } = useEnvironment()\n\n  React.useEffect(() => {\n    /**\n     * Since we cannot initially retrieve localStorage to due above mentioned\n     * reasons, do so after hydration.\n     *\n     * Priority:\n     * - system color mode\n     * - defined value on <ColorModeScript />, if present\n     * - previously stored value\n     */\n    if (isBrowser && colorModeManager.type === \"localStorage\") {\n      const mode = useSystemColorMode\n        ? getColorScheme(initialColorMode)\n        : root.get() || colorModeManager.get()\n\n      if (mode) {\n        rawSetColorMode(mode)\n      }\n    }\n  }, [colorModeManager, useSystemColorMode, initialColorMode])\n\n  React.useEffect(() => {\n    const isDark = colorMode === \"dark\"\n\n    syncBodyClassName(isDark, document)\n    root.set(isDark ? \"dark\" : \"light\")\n  }, [colorMode, document])\n\n  const setColorMode = React.useCallback(\n    (value: ColorMode) => {\n      colorModeManager.set(value)\n      rawSetColorMode(value)\n    },\n    [colorModeManager],\n  )\n\n  const toggleColorMode = React.useCallback(() => {\n    setColorMode(colorMode === \"light\" ? \"dark\" : \"light\")\n  }, [colorMode, setColorMode])\n\n  React.useEffect(() => {\n    let removeListener: any\n    if (useSystemColorMode) {\n      removeListener = addListener(setColorMode)\n    }\n    return () => {\n      if (removeListener && useSystemColorMode) {\n        removeListener()\n      }\n    }\n  }, [setColorMode, useSystemColorMode])\n\n  // presence of `value` indicates a controlled context\n  const context = React.useMemo(\n    () => ({\n      colorMode: (value ?? colorMode) as ColorMode,\n      toggleColorMode: value ? noop : toggleColorMode,\n      setColorMode: value ? noop : setColorMode,\n    }),\n    [colorMode, setColorMode, toggleColorMode, value],\n  )\n\n  return (\n    <ColorModeContext.Provider value={context}>\n      {children}\n    </ColorModeContext.Provider>\n  )\n}\n\nif (__DEV__) {\n  ColorModeProvider.displayName = \"ColorModeProvider\"\n}\n\n/**\n * Locks the color mode to `dark`, without any way to change it.\n */\nexport const DarkMode: React.FC = (props) => (\n  <ColorModeContext.Provider\n    value={{ colorMode: \"dark\", toggleColorMode: noop, setColorMode: noop }}\n    {...props}\n  />\n)\n\nif (__DEV__) {\n  DarkMode.displayName = \"DarkMode\"\n}\n\n/**\n * Locks the color mode to `light` without any way to change it.\n */\nexport const LightMode: React.FC = (props) => (\n  <ColorModeContext.Provider\n    value={{ colorMode: \"light\", toggleColorMode: noop, setColorMode: noop }}\n    {...props}\n  />\n)\n\nif (__DEV__) {\n  LightMode.displayName = \"LightMode\"\n}\n\n/**\n * Change value based on color mode.\n *\n * @param light the light mode value\n * @param dark the dark mode value\n *\n * @example\n *\n * ```js\n * const Icon = useColorModeValue(MoonIcon, SunIcon)\n * ```\n */\nexport function useColorModeValue<TLight = unknown, TDark = unknown>(\n  light: TLight,\n  dark: TDark,\n) {\n  const { colorMode } = useColorMode()\n  return colorMode === \"dark\" ? dark : light\n}\n"],"file":"color-mode-provider.js"}